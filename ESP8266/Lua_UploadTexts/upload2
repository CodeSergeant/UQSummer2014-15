file.open("init.lua","w")
file.writeline([[print("GPIO0 blinker and GPIO2 reset")]])
file.writeline([[gpio.mode(8,gpio.OUTPUT)]])
file.writeline([[gpio.mode(9,gpio.OUTPUT)]])
file.writeline([[tmr.delay(10) ]])
file.writeline([[gpio.write(8,gpio.HIGH)]])
file.writeline([[tmr.delay(10)]])
file.writeline([[gpio.write(8,gpio.LOW)]])
file.writeline([[sv=net.createServer(net.TCP, 30) ]])
file.writeline([[sv:listen(9999,function(c)]])
file.writeline([[c:on("receive", function(c, pl)]])
file.writeline([[if tonumber(pl) ~= nil then]])
file.writeline([[if tonumber(pl) >= 1 and tonumber(pl) <= 16 then]])
file.writeline([[print(tonumber(pl))]])
file.writeline([[tmr.delay(10)]])
file.writeline([[gpio.write(8,gpio.HIGH)]])
file.writeline([[gpio.write(8,gpio.LOW)]])
file.writeline([[for count =1,tonumber(pl) do]])
file.writeline([[ print(count)]])
file.writeline([[tmr.delay(10) ]])
file.writeline([[ gpio.write(9,gpio.LOW)]])
file.writeline([[tmr.delay(10)]])
file.writeline([[gpio.write(9,gpio.HIGH)]])
file.writeline([[c:send("Sequence finished") ]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[end]])
file.writeline([[c:send("Action completed") ]])
file.writeline([[end)]])
file.writeline([[end)]])
file.close()